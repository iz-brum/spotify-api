//- views/search.pug

extends layout.pug

block content
  .search-container 
    input(type="text" placeholder="Pesquisar música" id="search-query" autocomplete="off")
    button(type="submit" id="search-button") Pesquisar
    ul#history-dropdown

  ul.results-list
    each result in results || []
      li.result-item
        .result-info
          img.result-image(src=result.album.images[0].url, alt='Album Cover')
          div.result-details
            ul.artists
              each artist in result.artists
                li.artist #{artist.name}
            h3.result-name #{result.name}
        

  script.

    document.addEventListener("DOMContentLoaded", () => {
      const searchQueryInput = document.getElementById("search-query");
      const historyDropdown = document.getElementById("history-dropdown");

      // Adiciona um ouvinte de redimensionamento para atualizar a posição do dropdown
      window.addEventListener("resize", () => {
        positionDropdown();
      });

      const handleSearch = () => {
        const query = searchQueryInput.value.trim(); // Remove espaços em branco no início e no final;

        if (query) {
          // Recupere ou inicialize o histórico de pesquisas
          const searchHistory = JSON.parse(localStorage.getItem("searchHistory")) || [];

          // Adicione a nova consulta ao histórico, removendo duplicatas
          const updatedHistory = [query, ...searchHistory.filter(item => item !== query)].slice(0, 5);

          // Atualize o histórico no armazenamento local
          localStorage.setItem("searchHistory", JSON.stringify(updatedHistory));
        }
        // Redirecione para a página de pesquisa
        window.location.href = `/search?query=${query}`;
      };

      const showHistory = () => {
        const searchHistory = JSON.parse(localStorage.getItem('searchHistory')) || [];

        // Filtrar valores vazios
        const nonEmptyHistory = searchHistory.filter(item => item.trim() !== '');

        // Limpar o dropdown de histórico
        historyDropdown.innerHTML = '';

        // Adicionar itens ao dropdown
        nonEmptyHistory.forEach((item) => {
          const listItem = document.createElement('li');
          listItem.textContent = item;
          listItem.addEventListener('click', () => {
            searchQueryInput.value = item;
            handleSearch();
          });

          // Adicionar ao dropdown
          historyDropdown.appendChild(listItem);
        });

        // Exibir o dropdown
        historyDropdown.style.display = searchHistory.length > 0 ? 'block' : 'none';

        // Posicionar o dropdown
        positionDropdown();
      };

      const positionDropdown = () => {
        // Obter as coordenadas do input de pesquisa
        const rect = searchQueryInput.getBoundingClientRect();

        // Configurar a posição do dropdown
        historyDropdown.style.left = `${rect.left}px`;
        historyDropdown.style.top = `${rect.bottom}px`;
        historyDropdown.style.width = `${rect.width}px`;
      };

      // Adiciona ouvintes de eventos
      document.getElementById("search-button").addEventListener("click", handleSearch);

      searchQueryInput.addEventListener("input", () => {
        const query = searchQueryInput.value;
        if (query.length > 0) {
          historyDropdown.style.display = 'none';
        } else {
          showHistory();
        }
      });

      searchQueryInput.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
          handleSearch();
        }
      });

      searchQueryInput.addEventListener("focus", showHistory);

      searchQueryInput.addEventListener("blur", () => {
        setTimeout(() => {
          historyDropdown.style.display = 'none';
        }, 200);
      });
    });